====
    Copyright 2017 Systems Research Group, University of St Andrews:
    <https://github.com/stacs-srg>

    This file is part of the module linkage-java.

    linkage-java is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
    License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
    version.

    linkage-java is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
    warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.

    You should have received a copy of the GNU General Public License along with linkage-java. If not, see
    <http://www.gnu.org/licenses/>.
====

Issues

From Meeting with Oz and Graham 6-3-17

2. Distance between family members

3. Are there families that are asserted to be in 2 families whereas there should be 1?

4. Put those that do not match anywhere into separate families.

    done - altered KilmarnockMTreeBirthBirthMatcherGroundTruthChecker

5. Look at those within distance of N rather than nearest neighbour.

7. Write new classes to proces the Skye data - like above.

New list A/Graham/Eilidh 17-3-17

1. date format is inconsistent - use 11 for Nov rather than Nov

2. Names and middle names - try just using first names rather than whole (sometimes middle names are missing) - Adam vs. Adam Sawers

3. Use std names from Kilmarnock dataset.

4. Take account of distribution of names (and places etc.)

5. Weight names by frequency:
    common name - high frequency
    uncommon name - low frequency ... so do something like name diatance * frequency / normalisation factor

6. Do not use DOM in match

7. Only use year of marriage +/- 3 years?

8. Do date comparison only and see what works best with Eilidh's families from Kilmarnock data.

9. Put all the data in Storr and use a single store

>>>        ongoing.

10. Look at efficiency of for all in stream from Storr

11. I/O problems in Storr - are files being shut properly?

12. Matching of missing values, distance 0 means we are overly generous

13. Controlling the size of the families (during a merge)

    minimise the number of families, such that the diameter of each family < threshold

    diameter of each family
	    - the max pairwise distance
	    - or the average pairwise distance
	    - or something else that is perfect

    minimise the number of families, such that the number of children in each family < threshold

    constraints may also be attribute-based. for example of the form:
        - father's surname < threshold

14. BFT: it maps from personID (per birth) to a list of pairs of (personIDs x distance)
    - distances up to 10

15. Does solving problem: "minimise the number of families, such that the diameter of each family < threshold" solve the familial grouping problem with high precision and recall?

    If yes: we will still need to configure another algorithm (like Al's MTree based clustering one) such that it achieves similar results. Use a heuristic algorithm as a proxy to the complete one.

//-----------------

Experiments


a. Radius search
	1. Radius of range search, and its effect on quality (precision, recall, family size)
	Doing in:
	        KilmarnockMTreeBirthBirthNNFamilyMergerSpaceExplorer.sh

b. Similarity
	1. Altering the rules of how distance is calculated (regarding missing values)
	2. Using weights when calculating distance

	Graham doing 1 & 2.

	3. Dates: something more sophisticated then string similarity?
	4. Using thresholds on individual fields. post-match.

c. Controlling family size, The Merge
	1.



